sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(data, textFuncs, textMain) ::= <<
.data
<data>

.text
<textFuncs>

main:
<textMain>
	li $v0, 10	
	syscall		#exit
>>

literal(value) ::= <<
	li $a0 <value>
>>

paramDefines(param) ::= <<
<param>
    sw $a0 0($sp)
    addiu $sp $sp -4

>>

functionCall(params, id) ::= <<
sw $fp 0($sp)
<params>
    jal <id>
>>

intVarDef(id, initValue) ::= <<
    <id>: .word 0
>>

functionDefinition(id, e1, offset) ::= <<
    <id>:
        move $fp $sp
        sw $ra 0($sp)
        addiu $sp $sp -4
        <e1>
        lw $ra 4($sp)
        addiu $sp $sp <offset>
        lw $fp 0($sp)
        jr $ra
>>

assign(id, e2) ::= <<
<e2>
    sw $a0, <id>
>>

getFromData(id) ::= <<
    lw $a0, <id>
>>

getFromStack(offset) ::= <<
    lw $a0, <offset>($fp)

>>

plus(e1, e2, dStr) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	add $a0 $t1 $a0
	addiu $sp $sp 4		<if(dStr)># <dStr><else><endif>
>>

minus(e1, e2, dStr) ::= <<
<e1>
    sw $a0 0($sp)
    addiu $sp $sp -4
<e2>
    lw $t1 4($sp)
    sub $a0 $t1 $a0
    addiu $sp $sp 4    <if(dStr)># <dStr><else><endif>
>>

mult(e1, e2, dStr) ::= <<
<e1>
    sw $a0 0($sp)
    addiu $sp $sp -4
<e2>
    lw $t1 4($sp)
    mul $a0 $t1 $a0
    addiu $sp $sp 4    <if(dStr)># <dStr><else><endif>
>>

div(e1, e2, dStr) ::= <<
<e1>
    sw $a0 0($sp)
    addiu $sp $sp -4
<e2>
    lw $t1 4($sp)
    div $a0 $t1 $a0
    addiu $sp $sp 4    <if(dStr)># <dStr><else><endif>
>>

ifExpr(cond, thenBranch, elseBranch, counter) ::= <<
<cond>
    bgtz $a0, if_<counter>
    if_<counter>:
        <thenBranch>
        b fi_<counter>
    else_<counter>:
        <elseBranch>
    fi_<counter>:
>>

uMinus(e) ::= <<
<e>
    neg $a0 $a0
>>
